# ConstraintTemplate for Vulnerability Scanning
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: vulnerabilityscan
spec:
  crd:
    spec:
      names:
        kind: VulnerabilityScan
      validation:
        openAPIV3Schema:
          type: object
          properties:
            vulnerabilityData:
              type: object
              description: "Vulnerability scan data as image:vulnerabilities mapping"
            maxCriticalCVEs:
              type: number
              default: 0
              description: "Maximum allowed critical CVEs (default: 0)"
            maxHighCVEs:
              type: number
              default: 5
              description: "Maximum allowed high severity CVEs (default: 5)"
            allowedImages:
              type: array
              items:
                type: string
              description: "List of image patterns that are exempt from scanning"
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package vulnerability

        # Helper function to extract image name without tag/digest
        get_image_name(image) = name {
          # Split on @ for digest format (image@sha256:...)
          digest_parts := split(image, "@")
          base_image := digest_parts[0]

          # Split on : for tag format (image:tag)
          tag_parts := split(base_image, ":")

          # If there are 3+ parts, it might be registry/image:tag
          count(tag_parts) >= 2
          # Take all but the last part (remove tag)
          name := concat(":", array.slice(tag_parts, 0, count(tag_parts) - 1))
        } else = image {
          # Fallback: use the full image string
          true
        }

        # Check if image matches allowed patterns
        is_allowed_image(image) {
          allowed := input.parameters.allowedImages[_]
          contains(image, allowed)
        }

        # Extract all container images from the deployment
        container_images[image] {
          input.review.object.kind == "Deployment"
          container := input.review.object.spec.template.spec.containers[_]
          image := container.image
        }

        container_images[image] {
          input.review.object.kind == "Deployment"
          container := input.review.object.spec.template.spec.initContainers[_]
          image := container.image
        }

        # Violation: Critical CVEs found
        violation[{"msg": msg}] {
          input.review.object.kind == "Deployment"
          image := container_images[_]
          not is_allowed_image(image)

          image_name := get_image_name(image)
          vuln_data := input.parameters.vulnerabilityData[image_name]

          critical_cves := vuln_data.critical
          max_critical := input.parameters.maxCriticalCVEs

          critical_cves > max_critical
          msg := sprintf("Image %v has %v critical CVEs, exceeding maximum allowed (%v)", [image, critical_cves, max_critical])
        }

        # Violation: High CVEs exceed limit
        violation[{"msg": msg}] {
          input.review.object.kind == "Deployment"
          image := container_images[_]
          not is_allowed_image(image)

          image_name := get_image_name(image)
          vuln_data := input.parameters.vulnerabilityData[image_name]

          high_cves := vuln_data.high
          max_high := input.parameters.maxHighCVEs

          high_cves > max_high
          msg := sprintf("Image %v has %v high severity CVEs, exceeding maximum allowed (%v)", [image, high_cves, max_high])
        }

        # Violation: No vulnerability data found for image
        violation[{"msg": msg}] {
          input.review.object.kind == "Deployment"
          image := container_images[_]
          not is_allowed_image(image)

          image_name := get_image_name(image)
          not input.parameters.vulnerabilityData[image_name]

          msg := sprintf("No vulnerability scan data found for image %v. All images must be scanned before deployment.", [image])
        }
