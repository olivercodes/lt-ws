apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-root-detection
  namespace: falco-system
data:
  custom_rules.yaml: |
    # Custom rule to detect containers running as root
    - rule: Container Running as Root
      desc: Detect containers that are running with root privileges
      condition: >
        spawned_process and
        container and
        proc.pname != "pause" and
        user.uid = 0 and
        not user_known_root_container_exceptions
      output: >
        Container running as root detected (user=%user.name uid=%user.uid command=%proc.cmdline
        container_id=%container.id container_name=%container.name image=%container.image.repository:%container.image.tag)
      priority: WARNING
      tags: [container, root, security]

    # Exception list for legitimate root containers (customize as needed)
    - list: root_container_exceptions
      items: [
        "falco",
        "node-exporter",
        "kube-proxy",
        "calico-node",
        "flannel"
      ]

    # Macro to define exceptions
    - macro: user_known_root_container_exceptions
      condition: >
        (container.image.repository in (root_container_exceptions)) or
        (k8s.ns.name in ("kube-system", "kube-public", "falco-system"))

    # Additional rule for detecting root process execution in non-system namespaces
    - rule: Root Process in User Namespace
      desc: Detect root processes in user namespaces (non-system)
      condition: >
        spawned_process and
        container and
        user.uid = 0 and
        not k8s.ns.name in ("kube-system", "kube-public", "falco-system", "default") and
        not user_known_root_container_exceptions
      output: >
        Root process detected in user namespace (user=%user.name uid=%user.uid command=%proc.cmdline
        container_id=%container.id container_name=%container.name image=%container.image.repository:%container.image.tag
        namespace=%k8s.ns.name)
      priority: HIGH
      tags: [container, root, security, namespace]
